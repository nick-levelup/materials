// Обычный синтаксис {...} позволяет создать один объект.
// Но зачастую нужно создать много однотипных объектов.

// Для этого используют функции, запуская их при помощи специального
// оператора new.

// Конструктором становится любая функция, вызванная через new.


/* --------------------- */
function Animal(name) {
  this.name = name;
  this.canWalk = true; 
}

var animal = new Animal("ёжик");
/* --------------------- */

/*
  Автоматически создается новый, пустой объект.
  Специальное ключевое слово this получает ссылку на этот объект.
  Функция выполняется. Как правило, она модифицирует this, добавляет методы, свойства.
  Возвращается this.

*/

// скобки можно не ставить: new Animal



/* --------------------- */
function User(name) {
  this.name = name;

  this.sayHi = function() {
    alert("Моё имя: " + this.name);
  };
}

// Пример использования:
var ivan = new User("Иван");

ivan.sayHi(); // Моё имя: Иван
/* --------------------- */


/*
Напишите функцию-конструктор Summator,
которая создает объект с двумя методами:

  sum(a,b) возвращает сумму двух значений
  run() запрашивает два значения при помощи prompt и выводит их
  сумму, используя метод sum.

*/


// !
// Все переменные конструктора User становятся приватными,
// так как доступны только через замыкание, из внутренних функций.