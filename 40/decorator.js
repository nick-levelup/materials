/*
https://en.wikipedia.org/wiki/Decorator_pattern

Декоратор — приём программирования, который позволяет взять
существующую функцию и изменить/расширить ее поведение.

Декоратор получает функцию и возвращает обертку,
которая модифицирует (декорирует) её поведение, оставляя синтаксис
вызова тем же.
*/


/* --------------- */
function doublingDecorator(f) {        
  return function() {
    return 2*f.apply(this, arguments); // (*)
  };
}
 
// Использование:
 
function sum(a, b) {
  return a + b;
}
 
sum = doublingDecorator(sum);
 
alert( sum(1,2) ); // 6
alert( sum(2,3) ); // 10

/* --------------- */


/* --------------- */
function checkPermissionDecorator(f) {
  return function() {
    if ( isAdmin() ) {
      return f.apply(this, arguments);
    }
    alert('Недостаточно прав');
  }
}
/* ---------------- */



/*
Создайте декоратор makeLogging(f, log), который берет
функцию f и массив log.

Он должен возвращать обёртку вокруг f, которая при каждом
вызове записывает («логирует») аргументы в log, а затем передает
вызов в f.

В этой задаче можно считать, что у функции f ровно один аргумент.

Работать должно так: 
*/
/* ---------------- */
function work(a) {
  /* ... */ // work - произвольная функция, один аргумент
}
 
function makeLogging(f, log) { /* ваш код */ }
 
var log = [];
work = makeLogging(work, log);
 
work(1); // 1, добавлено в log
work(5); // 5, добавлено в log
 
for(var i=0; i<log.length; i++) {
  alert( 'Лог:' + log[i] ); // "Лог:1", затем "Лог:5"
}
/* ---------------- */


/*
Создайте декоратор makeCaching(f), который берет функцию f и
возвращает обертку, которая кеширует её результаты.

В этой задаче функция f имеет только один аргумент, и он является числом.

    При первом вызове обертки с определенным аргументом — она
    вызывает f и запоминает значение.
    При втором и последующих вызовах с тем же аргументом
    возвращается запомненное значение.

Должно работать так:
показать чистый исходник в новом окнеСкрыть/показать номера
строкпечать кода с сохранением подсветки
*/
/* ---------------- */
function f(arg) {
  return Math.random()*arg; // может быть любой функцией
}
 
function makeCaching(f) { /* ваш код */ }
 
f = makeCaching(f);
 
var a, b;
 
a = f(1);
b = f(1);
alert( a == b ); // true (значение закешировано)
 
b = f(2);
alert( a == b ); // false, другой аргумент => другое значение
/* ---------------- */