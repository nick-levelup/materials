/* Значение this в JavaScript не зависит от объекта,
в котором создана функция. Оно определяется во время вызова.
*/

// Любая функция может иметь в себе this.


/* --------------- */
function sayHi() {
  alert( this.firstName );
}
/* --------------- */


/* --------------- */
var user = {
  firstName: "Вася"
};
 
function func() {
  alert( this.firstName ); // Чему равно this?
  // 
}
 
user.sayHi = func;
 
user.sayHi();
/* --------------- */
// При вызове функции как метода объекта, через точку или квадратные
// скобки — функция получает в this этот объект.
// В данном случае user.sayHi() присвоит this = user.

/*
!!! Значение this не зависит от того, как функция была создана,
оно определяется исключительно в момент вызова.
*/

/* --------------- */
var user = { firstName: "Вася" };
var admin = { firstName: "Админ" };
 
function func() {
  alert( this.firstName ); // Чему равно this?
}
 
user.a = func;
admin.b = func;
 
user.a();
admin['b']();
/* --------------- */


// !Вызов в режиме обычной функции
/* --------------- */
function func() {
  alert(this); // Чему равно this?
}
 
func();
/* --------------- */


/*
Функцию можно вызвать, явно указав значение this.
Для этого у неё есть два метода: call и apply.
*/

/* call */
func.call(context, arg1, arg2,...)

/* apply */
func.apply(context, [arg1, arg2,...]);


/* --------------- */
getName.call(user, 'firstName', 'surname');

getName.apply(user, ['firstName', 'surname']);
/* --------------- */




/* --------------- */
/*
Напишите функцию f, которая будет обёрткой вокруг другой функции g.
Функция f обрабатывает первый аргумент сама, а остальные аргументы
передаёт в функцию g, сколько бы их ни было.

Например:
*/
function f() { /* ваш код */ }

function g(a, b, c) {
  alert( a + b + (c || 0) );
}

f("тест", 1, 2); // f выведет "тест", дальше g посчитает сумму "3"
f("тест2", 1, 2, 3); // f выведет "тест2", дальше g посчитает сумму "6"
/* --------------- */


function f() {

	console.log(arguments[0]);

	g.apply({}, [].slice.call(arguments, 1))

}

/* --------------- */
// Каким будет результат? Почему?
arr = ["a", "b"];
 
arr.push( function() { alert(this); } )
 
arr[2]();  // ?
/* --------------- */