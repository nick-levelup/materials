xhr.open(method, URL, async, user, password)

/*
method — HTTP-метод. Как правило, используется GET либо POST,
хотя доступны и более экзотические, вроде TRACE/DELETE/PUT и т.п.

URL — адрес запроса. Можно использовать не только http/https,
но и другие протоколы, например ftp:// и file://.
При этом есть ограничения безопасности, называемые
«Same Origin Policy»: запрос со страницы можно отправлять
только на тот же протокол://домен:порт, с которого она пришла.
В следующих главах мы рассмотрим, как их можно обойти.

async — если установлено в false, то запрос производится синхронно,
если true — асинхронно.
«Синхронный запрос» означает, что после вызова xhr.send() и до ответа
сервера главный поток будет «заморожен»: посетитель не сможет
взаимодействовать со страницей — прокручивать, нажимать на кнопки
и т.п. После получения ответа выполнение продолжится со следующей
строки.
«Асинхронный запрос» означает, что браузер отправит запрос,
а далее результат нужно будет получить через обработчики событий,
которые мы рассмотрим далее.

user, password — логин и пароль для HTTP-авторизации, если нужны.
*/

xhr.send([body])

/*
Именно этод метод открывает соединение и отправляет запрос на сервер.

В body находится тело запроса. Не у всякого запроса есть тело,
например у GET-запросов тела нет, а у POST — основные данные
как раз передаются через body.
*/

xhr.abort() // прерывает выполнение запроса.

/*
status
HTTP-код ответа: 200, 404, 403 и так далее.
Может быть также равен 0, если сервер не ответил или при
запросе на другой домен.

statusText
Текстовое описание статуса от сервера:
OK Not Found, Forbidden и так далее.

responseText
Текст ответа сервера.
*/

/*
Событие readystatechange происходит несколько раз в
процессе отсылки и получения ответа. При этом можно
посмотреть «текущее состояние запроса» в свойстве xhr.readyState.
*/

const unsigned short UNSENT = 0; // начальное состояние
const unsigned short OPENED = 1; // вызван open
const unsigned short HEADERS_RECEIVED = 2; // получены заголовки
const unsigned short LOADING = 3; // загружается тело (получен очередной пакет данных)
const unsigned short DONE = 4; // запрос завершён


xhr.setRequestHeader('Content-Type', 'application/json');
xhr.getResponseHeader('Content-Type')
xhr.getAllResponseHeaders()

xhr.timeout = 30000; // 30 секунд (в миллисекундах)

/*
loadstart — запрос начат.
progress — браузер получил очередной пакет данных, можно прочитать текущие полученные данные в responseText.
abort — запрос был отменён вызовом xhr.abort().
error — произошла ошибка.
load — запрос был успешно (без ошибок) завершён.
timeout — запрос был прекращён по таймауту.
loadend — запрос был завершён (успешно или неуспешно)*/


var xhr = new XMLHttpRequest();

xhr.open('GET', '/my/url', true);

xhr.send();

xhr.onreadystatechange = function() {
  if (this.readyState != 4) return;

  // по окончании запроса доступны:
  // status, statusText
  // responseText, responseXML (при content-type: text/xml)

  if (this.status != 200) {
    // обработать ошибку
    alert( 'ошибка: ' + (this.status ? this.statusText || 'запрос не удался') );
    return;
  }

  // получить результат из this.responseText или this.responseXML
}