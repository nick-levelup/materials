/* --------------------- */
// Объявление создает функцию и записывает ссылку на неё в переменную.
function sayHi() {
  alert('Привет');
}

alert(sayHi); // выведет код функции
/* --------------------- */


/* --------------------- */
// Функция — не просто значение, это объект.
function sayHi() { }

sayHi.test = 5;

alert(sayHi.test); // 5
/* --------------------- */


/* --------------------- */
// Функцию можно скопировать в другую переменную.
function sayHi(person) {
  alert('Привет, ' + person);
}

var func = sayHi;

alert(func); // выведет код функции

func('Вася'); // выведет 'Привет, Вася'

sayHi('Маша'); // и так по-прежнему работает: 'Привет, Маша'
/* --------------------- */


// Function Declaration

/* --------------------- */
// При объявлении функции создаётся переменная со значением-функцией
function func() { alert(1); }

var g = func; // скопировали

func = null;  // поменяли значение

g(); // работает, теперь функция в g, а в func ничего нет
func(); // вызываем null()? ошибка!
/* --------------------- */


/* --------------------- */
// В частности, невозможно иметь функцию и переменную с одинаковым именем:
function f() { } // объявить переменную f и записать в нее функцию
var f = 5; // объявить переменную f (а она уже объявлена) и присвоить 5

alert(f); // результат: 5
/* --------------------- */


/* --------------------- */
// Функции, объявленные как Function Declaration, создаются интерпретатором до выполнения кода.
var age = 20;
 
if (age >= 18) {
  function sayHi() {  alert('Прошу вас!');  }
} else {
  function sayHi() {  alert('До 18 нельзя'); }
}
 
sayHi();
/* --------------------- */


// Function Expression. Функцию можно создать и присвоить переменной как самое обычное значение.
/* --------------------- */
var f = function(параметры) {
   // тело функции
};
/* --------------------- */
var sayHi = function(person) {
    alert("Привет, " + person);
};

sayHi('Вася');
/* --------------------- */



/* --------------------- */
//В отличие от объявлений Function Declaration, которые создаются заранее, до выполнения кода, объявления
//Function Expression создают функцию, когда до них доходит выполнение.

sayHi(); // <-- работать не будет, функции еще нет

var sayHi = function() {  alert(1)  };
/* --------------------- */


/* --------------------- */
var age = prompt('Сколько вам лет?');
var sayHi;

if (age >= 18) {
  sayHi = function() {  alert('Вход разрешен');  }
} else {
  sayHi = function() {  alert('Извините, вы слишком молоды');  }
}

sayHi(); // запустит ту функцию, которая присвоена в if
/* --------------------- */


/* --------------------- */
//Функция с вызовом «на месте»
(function() {

  var a = 1 , b = 2; // переменные для нашего скрипта

  // код скрипта

})();
/* --------------------- */

// Если браузер видит function в основном потоке кода - он считает, что это Function Declaration.
//Если же function идёт в составе более сложного выражения, то он считает, что это Function Expression.
/* --------------------- */
+function() {
  alert('Вызов на месте');
}();

!function() {
  alert('Так тоже будет работать');
}();
/* --------------------- */


// Named Function Expression
/* --------------------- */
var f = function sayHi(name) {
  alert(sayHi); // изнутри функции - видно (выведет код функции)
};

alert(sayHi); // снаружи - не видно (ошибка: undefined variable 'sayHi')
/* --------------------- */